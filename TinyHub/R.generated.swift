//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let applinksTinyhubCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:tinyhub.com") ?? "applinks:tinyhub.com"
      static let webcredentialsTinyhubCom = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "webcredentials:tinyhub.com") ?? "webcredentials:tinyhub.com"

      fileprivate init() {}
    }

    struct comAppleSecurityApplicationGroups {
      static let groupComTosperyShared = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.tospery.shared") ?? "group.com.tospery.shared"

      fileprivate init() {}
    }

    struct keychainAccessGroups {
      static let appIdentifierPrefixComTosperySwhub = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)com.tospery.swhub") ?? "$(AppIdentifierPrefix)com.tospery.swhub"
      static let appIdentifierPrefixShared = infoPlistString(path: ["keychain-access-groups"], key: "$(AppIdentifierPrefix)shared") ?? "$(AppIdentifierPrefix)shared"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 47 files.
  struct file {
    /// Resource file `AliyunEmasServices-Info.plist`.
    static let aliyunEmasServicesInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "AliyunEmasServices-Info", pathExtension: "plist")
    /// Resource file `Configuration.json`.
    static let configurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Configuration", pathExtension: "json")
    /// Resource file `DegreeList.json`.
    static let degreeListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "DegreeList", pathExtension: "json")
    /// Resource file `LanguageList.json`.
    static let languageListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "LanguageList", pathExtension: "json")
    /// Resource file `PrivacyInfo.xcprivacy`.
    static let privacyInfoXcprivacy = Rswift.FileResource(bundle: R.hostingBundle, name: "PrivacyInfo", pathExtension: "xcprivacy")
    /// Resource file `RepoList#trending.json`.
    static let repoListTrendingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "RepoList#trending", pathExtension: "json")
    /// Resource file `URLSchemeList.json`.
    static let urlSchemeListJson = Rswift.FileResource(bundle: R.hostingBundle, name: "URLSchemeList", pathExtension: "json")
    /// Resource file `ic_refresh_idle10@2x.png`.
    static let ic_refresh_idle102xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle10@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle11@2x.png`.
    static let ic_refresh_idle112xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle11@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle12@2x.png`.
    static let ic_refresh_idle122xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle12@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle13@2x.png`.
    static let ic_refresh_idle132xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle13@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle14@2x.png`.
    static let ic_refresh_idle142xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle14@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle15@2x.png`.
    static let ic_refresh_idle152xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle15@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle16@2x.png`.
    static let ic_refresh_idle162xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle16@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle17@2x.png`.
    static let ic_refresh_idle172xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle17@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle18@2x.png`.
    static let ic_refresh_idle182xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle18@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle19@2x.png`.
    static let ic_refresh_idle192xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle19@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle1@2x.png`.
    static let ic_refresh_idle12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle1@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle20@2x.png`.
    static let ic_refresh_idle202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle20@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle2@2x.png`.
    static let ic_refresh_idle22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle2@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle3@2x.png`.
    static let ic_refresh_idle32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle3@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle4@2x.png`.
    static let ic_refresh_idle42xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle4@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle5@2x.png`.
    static let ic_refresh_idle52xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle5@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle6@2x.png`.
    static let ic_refresh_idle62xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle6@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle7@2x.png`.
    static let ic_refresh_idle72xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle7@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle8@2x.png`.
    static let ic_refresh_idle82xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle8@2x", pathExtension: "png")
    /// Resource file `ic_refresh_idle9@2x.png`.
    static let ic_refresh_idle92xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_idle9@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading10@2x.png`.
    static let ic_refresh_loading102xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading10@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading11@2x.png`.
    static let ic_refresh_loading112xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading11@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading12@2x.png`.
    static let ic_refresh_loading122xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading12@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading13@2x.png`.
    static let ic_refresh_loading132xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading13@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading14@2x.png`.
    static let ic_refresh_loading142xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading14@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading15@2x.png`.
    static let ic_refresh_loading152xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading15@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading16@2x.png`.
    static let ic_refresh_loading162xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading16@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading17@2x.png`.
    static let ic_refresh_loading172xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading17@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading18@2x.png`.
    static let ic_refresh_loading182xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading18@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading19@2x.png`.
    static let ic_refresh_loading192xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading19@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading1@2x.png`.
    static let ic_refresh_loading12xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading1@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading20@2x.png`.
    static let ic_refresh_loading202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading20@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading2@2x.png`.
    static let ic_refresh_loading22xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading2@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading3@2x.png`.
    static let ic_refresh_loading32xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading3@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading4@2x.png`.
    static let ic_refresh_loading42xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading4@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading5@2x.png`.
    static let ic_refresh_loading52xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading5@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading6@2x.png`.
    static let ic_refresh_loading62xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading6@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading7@2x.png`.
    static let ic_refresh_loading72xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading7@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading8@2x.png`.
    static let ic_refresh_loading82xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading8@2x", pathExtension: "png")
    /// Resource file `ic_refresh_loading9@2x.png`.
    static let ic_refresh_loading92xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_refresh_loading9@2x", pathExtension: "png")

    /// `bundle.url(forResource: "AliyunEmasServices-Info", withExtension: "plist")`
    static func aliyunEmasServicesInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.aliyunEmasServicesInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Configuration", withExtension: "json")`
    static func configurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DegreeList", withExtension: "json")`
    static func degreeListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.degreeListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LanguageList", withExtension: "json")`
    static func languageListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.languageListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PrivacyInfo", withExtension: "xcprivacy")`
    static func privacyInfoXcprivacy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyInfoXcprivacy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RepoList#trending", withExtension: "json")`
    static func repoListTrendingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.repoListTrendingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "URLSchemeList", withExtension: "json")`
    static func urlSchemeListJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.urlSchemeListJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle10@2x", withExtension: "png")`
    static func ic_refresh_idle102xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle102xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle11@2x", withExtension: "png")`
    static func ic_refresh_idle112xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle112xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle12@2x", withExtension: "png")`
    static func ic_refresh_idle122xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle122xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle13@2x", withExtension: "png")`
    static func ic_refresh_idle132xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle132xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle14@2x", withExtension: "png")`
    static func ic_refresh_idle142xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle142xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle15@2x", withExtension: "png")`
    static func ic_refresh_idle152xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle152xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle16@2x", withExtension: "png")`
    static func ic_refresh_idle162xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle162xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle17@2x", withExtension: "png")`
    static func ic_refresh_idle172xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle172xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle18@2x", withExtension: "png")`
    static func ic_refresh_idle182xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle182xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle19@2x", withExtension: "png")`
    static func ic_refresh_idle192xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle192xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle1@2x", withExtension: "png")`
    static func ic_refresh_idle12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle20@2x", withExtension: "png")`
    static func ic_refresh_idle202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle2@2x", withExtension: "png")`
    static func ic_refresh_idle22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle3@2x", withExtension: "png")`
    static func ic_refresh_idle32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle4@2x", withExtension: "png")`
    static func ic_refresh_idle42xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle42xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle5@2x", withExtension: "png")`
    static func ic_refresh_idle52xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle52xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle6@2x", withExtension: "png")`
    static func ic_refresh_idle62xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle62xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle7@2x", withExtension: "png")`
    static func ic_refresh_idle72xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle72xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle8@2x", withExtension: "png")`
    static func ic_refresh_idle82xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle82xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_idle9@2x", withExtension: "png")`
    static func ic_refresh_idle92xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_idle92xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading10@2x", withExtension: "png")`
    static func ic_refresh_loading102xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading102xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading11@2x", withExtension: "png")`
    static func ic_refresh_loading112xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading112xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading12@2x", withExtension: "png")`
    static func ic_refresh_loading122xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading122xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading13@2x", withExtension: "png")`
    static func ic_refresh_loading132xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading132xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading14@2x", withExtension: "png")`
    static func ic_refresh_loading142xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading142xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading15@2x", withExtension: "png")`
    static func ic_refresh_loading152xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading152xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading16@2x", withExtension: "png")`
    static func ic_refresh_loading162xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading162xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading17@2x", withExtension: "png")`
    static func ic_refresh_loading172xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading172xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading18@2x", withExtension: "png")`
    static func ic_refresh_loading182xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading182xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading19@2x", withExtension: "png")`
    static func ic_refresh_loading192xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading192xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading1@2x", withExtension: "png")`
    static func ic_refresh_loading12xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading12xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading20@2x", withExtension: "png")`
    static func ic_refresh_loading202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading2@2x", withExtension: "png")`
    static func ic_refresh_loading22xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading22xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading3@2x", withExtension: "png")`
    static func ic_refresh_loading32xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading32xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading4@2x", withExtension: "png")`
    static func ic_refresh_loading42xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading42xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading5@2x", withExtension: "png")`
    static func ic_refresh_loading52xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading52xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading6@2x", withExtension: "png")`
    static func ic_refresh_loading62xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading62xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading7@2x", withExtension: "png")`
    static func ic_refresh_loading72xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading72xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading8@2x", withExtension: "png")`
    static func ic_refresh_loading82xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading82xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_refresh_loading9@2x", withExtension: "png")`
    static func ic_refresh_loading92xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_refresh_loading92xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 110 images.
  struct image {
    /// Image `AppLogo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppLogo")
    /// Image `ic_about`.
    static let ic_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_about")
    /// Image `ic_arrow_down`.
    static let ic_arrow_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down")
    /// Image `ic_arrow_right`.
    static let ic_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right")
    /// Image `ic_blog`.
    static let ic_blog = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blog")
    /// Image `ic_branch`.
    static let ic_branch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_branch")
    /// Image `ic_branches`.
    static let ic_branches = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_branches")
    /// Image `ic_checked`.
    static let ic_checked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked")
    /// Image `ic_comment`.
    static let ic_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_comment")
    /// Image `ic_company`.
    static let ic_company = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_company")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_event_create`.
    static let ic_event_create = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_create")
    /// Image `ic_event_delete`.
    static let ic_event_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_delete")
    /// Image `ic_event_fork`.
    static let ic_event_fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_fork")
    /// Image `ic_event_issue_comment`.
    static let ic_event_issue_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_issue_comment")
    /// Image `ic_event_issue_handle`.
    static let ic_event_issue_handle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_issue_handle")
    /// Image `ic_event_pull`.
    static let ic_event_pull = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_pull")
    /// Image `ic_event_push`.
    static let ic_event_push = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_push")
    /// Image `ic_event_star`.
    static let ic_event_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_event_star")
    /// Image `ic_feedback`.
    static let ic_feedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_feedback")
    /// Image `ic_file_code`.
    static let ic_file_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_code")
    /// Image `ic_file_dir`.
    static let ic_file_dir = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_dir")
    /// Image `ic_file_html`.
    static let ic_file_html = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_html")
    /// Image `ic_file_json`.
    static let ic_file_json = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_json")
    /// Image `ic_file_license`.
    static let ic_file_license = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_license")
    /// Image `ic_file_markdown`.
    static let ic_file_markdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_markdown")
    /// Image `ic_file_podspec`.
    static let ic_file_podspec = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_podspec")
    /// Image `ic_file_submodule`.
    static let ic_file_submodule = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_submodule")
    /// Image `ic_file_symlink`.
    static let ic_file_symlink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_symlink")
    /// Image `ic_file_txt`.
    static let ic_file_txt = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_txt")
    /// Image `ic_file_unknown`.
    static let ic_file_unknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_unknown")
    /// Image `ic_file_yaml`.
    static let ic_file_yaml = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_file_yaml")
    /// Image `ic_fork`.
    static let ic_fork = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fork")
    /// Image `ic_github`.
    static let ic_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_github")
    /// Image `ic_issue_closed`.
    static let ic_issue_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_issue_closed")
    /// Image `ic_issue_open`.
    static let ic_issue_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_issue_open")
    /// Image `ic_issues`.
    static let ic_issues = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_issues")
    /// Image `ic_language`.
    static let ic_language = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_language")
    /// Image `ic_location_head`.
    static let ic_location_head = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_head")
    /// Image `ic_location`.
    static let ic_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location")
    /// Image `ic_native_share`.
    static let ic_native_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_native_share")
    /// Image `ic_organization`.
    static let ic_organization = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_organization")
    /// Image `ic_pull_closed`.
    static let ic_pull_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pull_closed")
    /// Image `ic_pull_open`.
    static let ic_pull_open = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pull_open")
    /// Image `ic_pulls`.
    static let ic_pulls = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pulls")
    /// Image `ic_readme`.
    static let ic_readme = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_readme")
    /// Image `ic_refresh_idle10`.
    static let ic_refresh_idle10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle10")
    /// Image `ic_refresh_idle11`.
    static let ic_refresh_idle11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle11")
    /// Image `ic_refresh_idle12`.
    static let ic_refresh_idle12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle12")
    /// Image `ic_refresh_idle13`.
    static let ic_refresh_idle13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle13")
    /// Image `ic_refresh_idle14`.
    static let ic_refresh_idle14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle14")
    /// Image `ic_refresh_idle15`.
    static let ic_refresh_idle15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle15")
    /// Image `ic_refresh_idle16`.
    static let ic_refresh_idle16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle16")
    /// Image `ic_refresh_idle17`.
    static let ic_refresh_idle17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle17")
    /// Image `ic_refresh_idle18`.
    static let ic_refresh_idle18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle18")
    /// Image `ic_refresh_idle19`.
    static let ic_refresh_idle19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle19")
    /// Image `ic_refresh_idle1`.
    static let ic_refresh_idle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle1")
    /// Image `ic_refresh_idle20`.
    static let ic_refresh_idle20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle20")
    /// Image `ic_refresh_idle2`.
    static let ic_refresh_idle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle2")
    /// Image `ic_refresh_idle3`.
    static let ic_refresh_idle3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle3")
    /// Image `ic_refresh_idle4`.
    static let ic_refresh_idle4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle4")
    /// Image `ic_refresh_idle5`.
    static let ic_refresh_idle5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle5")
    /// Image `ic_refresh_idle6`.
    static let ic_refresh_idle6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle6")
    /// Image `ic_refresh_idle7`.
    static let ic_refresh_idle7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle7")
    /// Image `ic_refresh_idle8`.
    static let ic_refresh_idle8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle8")
    /// Image `ic_refresh_idle9`.
    static let ic_refresh_idle9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_idle9")
    /// Image `ic_refresh_loading10`.
    static let ic_refresh_loading10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading10")
    /// Image `ic_refresh_loading11`.
    static let ic_refresh_loading11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading11")
    /// Image `ic_refresh_loading12`.
    static let ic_refresh_loading12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading12")
    /// Image `ic_refresh_loading13`.
    static let ic_refresh_loading13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading13")
    /// Image `ic_refresh_loading14`.
    static let ic_refresh_loading14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading14")
    /// Image `ic_refresh_loading15`.
    static let ic_refresh_loading15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading15")
    /// Image `ic_refresh_loading16`.
    static let ic_refresh_loading16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading16")
    /// Image `ic_refresh_loading17`.
    static let ic_refresh_loading17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading17")
    /// Image `ic_refresh_loading18`.
    static let ic_refresh_loading18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading18")
    /// Image `ic_refresh_loading19`.
    static let ic_refresh_loading19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading19")
    /// Image `ic_refresh_loading1`.
    static let ic_refresh_loading1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading1")
    /// Image `ic_refresh_loading20`.
    static let ic_refresh_loading20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading20")
    /// Image `ic_refresh_loading2`.
    static let ic_refresh_loading2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading2")
    /// Image `ic_refresh_loading3`.
    static let ic_refresh_loading3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading3")
    /// Image `ic_refresh_loading4`.
    static let ic_refresh_loading4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading4")
    /// Image `ic_refresh_loading5`.
    static let ic_refresh_loading5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading5")
    /// Image `ic_refresh_loading6`.
    static let ic_refresh_loading6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading6")
    /// Image `ic_refresh_loading7`.
    static let ic_refresh_loading7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading7")
    /// Image `ic_refresh_loading8`.
    static let ic_refresh_loading8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading8")
    /// Image `ic_refresh_loading9`.
    static let ic_refresh_loading9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh_loading9")
    /// Image `ic_repo_small`.
    static let ic_repo_small = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_repo_small")
    /// Image `ic_search_erase`.
    static let ic_search_erase = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_erase")
    /// Image `ic_search_history`.
    static let ic_search_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_history")
    /// Image `ic_search_options`.
    static let ic_search_options = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_options")
    /// Image `ic_search_setting`.
    static let ic_search_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_setting")
    /// Image `ic_search`.
    static let ic_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search")
    /// Image `ic_settings`.
    static let ic_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings")
    /// Image `ic_star`.
    static let ic_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star")
    /// Image `ic_toast_failure`.
    static let ic_toast_failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_toast_failure")
    /// Image `ic_toast_success`.
    static let ic_toast_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_toast_success")
    /// Image `ic_user_default`.
    static let ic_user_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_default")
    /// Image `ic_user_placeholder`.
    static let ic_user_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_placeholder")
    /// Image `navbar_search`.
    static let navbar_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_search")
    /// Image `navbar_theme_dark`.
    static let navbar_theme_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_theme_dark")
    /// Image `navbar_theme_light`.
    static let navbar_theme_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "navbar_theme_light")
    /// Image `personal_parallax_bg`.
    static let personal_parallax_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_parallax_bg")
    /// Image `tabbar_event_normal`.
    static let tabbar_event_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_normal")
    /// Image `tabbar_event_selected`.
    static let tabbar_event_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_event_selected")
    /// Image `tabbar_favorite_normal`.
    static let tabbar_favorite_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_favorite_normal")
    /// Image `tabbar_favorite_selected`.
    static let tabbar_favorite_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_favorite_selected")
    /// Image `tabbar_personal_normal`.
    static let tabbar_personal_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_normal")
    /// Image `tabbar_personal_selected`.
    static let tabbar_personal_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_personal_selected")
    /// Image `tabbar_trending_normal`.
    static let tabbar_trending_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_trending_normal")
    /// Image `tabbar_trending_selected`.
    static let tabbar_trending_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_trending_selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AppLogo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_about", bundle: ..., traitCollection: ...)`
    static func ic_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_about, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blog", bundle: ..., traitCollection: ...)`
    static func ic_blog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_branch", bundle: ..., traitCollection: ...)`
    static func ic_branch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_branch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_branches", bundle: ..., traitCollection: ...)`
    static func ic_branches(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_branches, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked", bundle: ..., traitCollection: ...)`
    static func ic_checked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_comment", bundle: ..., traitCollection: ...)`
    static func ic_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_company", bundle: ..., traitCollection: ...)`
    static func ic_company(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_company, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_create", bundle: ..., traitCollection: ...)`
    static func ic_event_create(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_create, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_delete", bundle: ..., traitCollection: ...)`
    static func ic_event_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_fork", bundle: ..., traitCollection: ...)`
    static func ic_event_fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_fork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_issue_comment", bundle: ..., traitCollection: ...)`
    static func ic_event_issue_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_issue_comment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_issue_handle", bundle: ..., traitCollection: ...)`
    static func ic_event_issue_handle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_issue_handle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_pull", bundle: ..., traitCollection: ...)`
    static func ic_event_pull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_pull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_push", bundle: ..., traitCollection: ...)`
    static func ic_event_push(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_push, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_event_star", bundle: ..., traitCollection: ...)`
    static func ic_event_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_event_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_feedback", bundle: ..., traitCollection: ...)`
    static func ic_feedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_feedback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_code", bundle: ..., traitCollection: ...)`
    static func ic_file_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_dir", bundle: ..., traitCollection: ...)`
    static func ic_file_dir(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_dir, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_html", bundle: ..., traitCollection: ...)`
    static func ic_file_html(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_html, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_json", bundle: ..., traitCollection: ...)`
    static func ic_file_json(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_json, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_license", bundle: ..., traitCollection: ...)`
    static func ic_file_license(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_license, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_markdown", bundle: ..., traitCollection: ...)`
    static func ic_file_markdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_markdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_podspec", bundle: ..., traitCollection: ...)`
    static func ic_file_podspec(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_podspec, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_submodule", bundle: ..., traitCollection: ...)`
    static func ic_file_submodule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_submodule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_symlink", bundle: ..., traitCollection: ...)`
    static func ic_file_symlink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_symlink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_txt", bundle: ..., traitCollection: ...)`
    static func ic_file_txt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_txt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_unknown", bundle: ..., traitCollection: ...)`
    static func ic_file_unknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_unknown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_file_yaml", bundle: ..., traitCollection: ...)`
    static func ic_file_yaml(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_file_yaml, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fork", bundle: ..., traitCollection: ...)`
    static func ic_fork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_github", bundle: ..., traitCollection: ...)`
    static func ic_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_github, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_issue_closed", bundle: ..., traitCollection: ...)`
    static func ic_issue_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_issue_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_issue_open", bundle: ..., traitCollection: ...)`
    static func ic_issue_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_issue_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_issues", bundle: ..., traitCollection: ...)`
    static func ic_issues(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_issues, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_language", bundle: ..., traitCollection: ...)`
    static func ic_language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location", bundle: ..., traitCollection: ...)`
    static func ic_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_head", bundle: ..., traitCollection: ...)`
    static func ic_location_head(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_head, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_native_share", bundle: ..., traitCollection: ...)`
    static func ic_native_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_native_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_organization", bundle: ..., traitCollection: ...)`
    static func ic_organization(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_organization, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pull_closed", bundle: ..., traitCollection: ...)`
    static func ic_pull_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pull_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pull_open", bundle: ..., traitCollection: ...)`
    static func ic_pull_open(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pull_open, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pulls", bundle: ..., traitCollection: ...)`
    static func ic_pulls(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pulls, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_readme", bundle: ..., traitCollection: ...)`
    static func ic_readme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_readme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle1", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle10", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle11", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle12", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle13", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle14", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle15", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle16", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle17", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle18", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle19", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle2", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle20", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle3", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle4", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle5", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle6", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle7", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle8", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_idle9", bundle: ..., traitCollection: ...)`
    static func ic_refresh_idle9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_idle9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading1", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading10", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading11", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading12", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading13", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading14", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading15", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading15, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading16", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading17", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading17, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading18", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading19", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading2", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading20", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading3", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading4", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading5", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading6", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading7", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading8", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh_loading9", bundle: ..., traitCollection: ...)`
    static func ic_refresh_loading9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh_loading9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_repo_small", bundle: ..., traitCollection: ...)`
    static func ic_repo_small(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_repo_small, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search", bundle: ..., traitCollection: ...)`
    static func ic_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_erase", bundle: ..., traitCollection: ...)`
    static func ic_search_erase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_erase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_history", bundle: ..., traitCollection: ...)`
    static func ic_search_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_options", bundle: ..., traitCollection: ...)`
    static func ic_search_options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_options, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_setting", bundle: ..., traitCollection: ...)`
    static func ic_search_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings", bundle: ..., traitCollection: ...)`
    static func ic_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star", bundle: ..., traitCollection: ...)`
    static func ic_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_toast_failure", bundle: ..., traitCollection: ...)`
    static func ic_toast_failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_toast_failure, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_toast_success", bundle: ..., traitCollection: ...)`
    static func ic_toast_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_toast_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_default", bundle: ..., traitCollection: ...)`
    static func ic_user_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_default, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_user_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_search", bundle: ..., traitCollection: ...)`
    static func navbar_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_theme_dark", bundle: ..., traitCollection: ...)`
    static func navbar_theme_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_theme_dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navbar_theme_light", bundle: ..., traitCollection: ...)`
    static func navbar_theme_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navbar_theme_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "personal_parallax_bg", bundle: ..., traitCollection: ...)`
    static func personal_parallax_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_parallax_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_event_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_event_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_event_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_event_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_favorite_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_favorite_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_favorite_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_favorite_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_favorite_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_favorite_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_personal_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_personal_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_personal_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_trending_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_trending_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_trending_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_trending_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_trending_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_trending_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 152 localization keys.
    struct localizable {
      /// en translation: -----Sign in with GitHub-----
      ///
      /// Locales: en, zh-Hans
      static let loginAuth = Rswift.StringResource(key: "Login.Auth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Access Token
      ///
      /// Locales: en, zh-Hans
      static let accessToken = Rswift.StringResource(key: "Access Token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Any language
      ///
      /// Locales: en, zh-Hans
      static let anyLanguage = Rswift.StringResource(key: "Any Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Author
      ///
      /// Locales: en, zh-Hans
      static let author = Rswift.StringResource(key: "Author", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Authorization failed
      ///
      /// Locales: en, zh-Hans
      static let errorAppMessage1 = Rswift.StringResource(key: "Error.App.Message1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Based on Reactive framework
      ///
      /// Locales: en, zh-Hans
      static let loginSlogan = Rswift.StringResource(key: "Login.Slogan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bio
      ///
      /// Locales: en, zh-Hans
      static let bio = Rswift.StringResource(key: "Bio", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Blog
      ///
      /// Locales: en, zh-Hans
      static let blog = Rswift.StringResource(key: "Blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Branches
      ///
      /// Locales: en, zh-Hans
      static let branches = Rswift.StringResource(key: "Branches", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear cache
      ///
      /// Locales: en, zh-Hans
      static let clearCache = Rswift.StringResource(key: "Clear Cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear cache successfully
      ///
      /// Locales: en, zh-Hans
      static let toastCacheMessage = Rswift.StringResource(key: "Toast.Cache.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear history
      ///
      /// Locales: en, zh-Hans
      static let clearHistory = Rswift.StringResource(key: "Clear History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear the search history?
      ///
      /// Locales: en, zh-Hans
      static let alertEraseMessage = Rswift.StringResource(key: "Alert.Erase.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Click To Login
      ///
      /// Locales: en, zh-Hans
      static let clickToLogin = Rswift.StringResource(key: "Click To Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: en, zh-Hans
      static let closed = Rswift.StringResource(key: "Closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Company
      ///
      /// Locales: en, zh-Hans
      static let company = Rswift.StringResource(key: "Company", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm logout?
      ///
      /// Locales: en, zh-Hans
      static let alertLogoutMessage = Rswift.StringResource(key: "Alert.Logout.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm that the language is changed to %@？
      ///
      /// Locales: en, zh-Hans
      static let alertLocalizationMessage = Rswift.StringResource(key: "Alert.Localization.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm that the theme is changed to%@？
      ///
      /// Locales: en, zh-Hans
      static let alertThemeMessage = Rswift.StringResource(key: "Alert.Theme.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contributors
      ///
      /// Locales: en, zh-Hans
      static let contributors = Rswift.StringResource(key: "Contributors", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Event
      ///
      /// Locales: en, zh-Hans
      static let eventCreate = Rswift.StringResource(key: "Event.Create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Fork
      ///
      /// Locales: en, zh-Hans
      static let eventFork = Rswift.StringResource(key: "Event.Fork", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Daily
      ///
      /// Locales: en, zh-Hans
      static let daily = Rswift.StringResource(key: "Daily", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static let errorDataInvalidMessage = Rswift.StringResource(key: "Error.DataInvalid.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static let errorDataInvalidTitle = Rswift.StringResource(key: "Error.DataInvalid.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dear, the current login has expired
      ///
      /// Locales: en, zh-Hans
      static let errorUserLoginExpiredMessage = Rswift.StringResource(key: "Error.User.LoginExpired.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Dear, you haven't logged in yet
      ///
      /// Locales: en, zh-Hans
      static let errorUserNotLoginedInMessage = Rswift.StringResource(key: "Error.User.NotLoginedIn.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete Event
      ///
      /// Locales: en, zh-Hans
      static let eventDelete = Rswift.StringResource(key: "Event.Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deleted branch
      ///
      /// Locales: en, zh-Hans
      static let deletedBranch = Rswift.StringResource(key: "Deleted Branch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Developers
      ///
      /// Locales: en, zh-Hans
      static let developers = Rswift.StringResource(key: "Developers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, zh-Hans
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Environment: %@ - iOS%@ - v%@(%@)
      ///
      /// Locales: en, zh-Hans
      static let feedbackEnvironment = Rswift.StringResource(key: "Feedback.Environment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Event
      ///
      /// Locales: en, zh-Hans
      static let event = Rswift.StringResource(key: "Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Exit
      ///
      /// Locales: en, zh-Hans
      static let exit = Rswift.StringResource(key: "Exit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Exit login
      ///
      /// Locales: en, zh-Hans
      static let exitLogin = Rswift.StringResource(key: "Exit Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Favorite
      ///
      /// Locales: en, zh-Hans
      static let favorite = Rswift.StringResource(key: "Favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans
      static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Follow
      ///
      /// Locales: en, zh-Hans
      static let follow = Rswift.StringResource(key: "Follow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Follow system
      ///
      /// Locales: en, zh-Hans
      static let followSystem = Rswift.StringResource(key: "Follow System", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans
      static let followers = Rswift.StringResource(key: "Followers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Following
      ///
      /// Locales: en, zh-Hans
      static let following = Rswift.StringResource(key: "Following", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forked
      ///
      /// Locales: en, zh-Hans
      static let forked = Rswift.StringResource(key: "Forked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forks
      ///
      /// Locales: en, zh-Hans
      static let forks = Rswift.StringResource(key: "Forks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Handle Issue
      ///
      /// Locales: en, zh-Hans
      static let eventIssueHandle = Rswift.StringResource(key: "Event.Issue.Handle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, zh-Hans
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hot
      ///
      /// Locales: en, zh-Hans
      static let hot = Rswift.StringResource(key: "Hot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issue
      ///
      /// Locales: en, zh-Hans
      static let issue = Rswift.StringResource(key: "Issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Issues
      ///
      /// Locales: en, zh-Hans
      static let issues = Rswift.StringResource(key: "Issues", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Joined on %@
      ///
      /// Locales: en, zh-Hans
      static let joinedOn = Rswift.StringResource(key: "Joined on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, zh-Hans
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language environment
      ///
      /// Locales: en, zh-Hans
      static let languageEnvironment = Rswift.StringResource(key: "Language Environment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Let's build from here
      ///
      /// Locales: en, zh-Hans
      static let appSlogan = Rswift.StringResource(key: "App Slogan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: List is empty
      ///
      /// Locales: en, zh-Hans
      static let errorListIsEmptyTitle = Rswift.StringResource(key: "Error.ListIsEmpty.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, zh-Hans
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, zh-Hans
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login expired
      ///
      /// Locales: en, zh-Hans
      static let errorUserLoginExpiredTitle = Rswift.StringResource(key: "Error.User.LoginExpired.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login failed, please try again later
      ///
      /// Locales: en, zh-Hans
      static let errorAppMessage2 = Rswift.StringResource(key: "Error.App.Message2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Modify userinfo
      ///
      /// Locales: en, zh-Hans
      static let modifyUserinfo = Rswift.StringResource(key: "Modify Userinfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Montly
      ///
      /// Locales: en, zh-Hans
      static let montly = Rswift.StringResource(key: "Montly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static let errorNavigationMessage = Rswift.StringResource(key: "Error.Navigation.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static let errorNavigationTitle = Rswift.StringResource(key: "Error.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network anomaly
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotReachableTitle = Rswift.StringResource(key: "Error.Network.NotReachable.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network is not connected
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotConnectedTitle = Rswift.StringResource(key: "Error.Network.NotConnected.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New Comment
      ///
      /// Locales: en, zh-Hans
      static let eventIssueComment = Rswift.StringResource(key: "Event.Issue.Comment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Nickname
      ///
      /// Locales: en, zh-Hans
      static let nickname = Rswift.StringResource(key: "Nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, zh-Hans
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Description
      ///
      /// Locales: en, zh-Hans
      static let noDescription = Rswift.StringResource(key: "No Description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No bio provided
      ///
      /// Locales: en, zh-Hans
      static let noneBio = Rswift.StringResource(key: "None.Bio", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No blog provided
      ///
      /// Locales: en, zh-Hans
      static let noneBlog = Rswift.StringResource(key: "None.Blog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No company provided
      ///
      /// Locales: en, zh-Hans
      static let noneCompany = Rswift.StringResource(key: "None.Company", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No description provided
      ///
      /// Locales: en, zh-Hans
      static let noneDesc = Rswift.StringResource(key: "None.Desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No email provided
      ///
      /// Locales: en, zh-Hans
      static let noneEmail = Rswift.StringResource(key: "None.Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No hot repository
      ///
      /// Locales: en, zh-Hans
      static let noneRepo = Rswift.StringResource(key: "None.Repo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No license
      ///
      /// Locales: en, zh-Hans
      static let noneLicense = Rswift.StringResource(key: "None.License", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No location provided
      ///
      /// Locales: en, zh-Hans
      static let noneLocation = Rswift.StringResource(key: "None.Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No nickname
      ///
      /// Locales: en, zh-Hans
      static let noneNickname = Rswift.StringResource(key: "None.Nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Note: Feedback will be submitted to the GitHub repository as an issue
      ///
      /// Locales: en, zh-Hans
      static let feedbackNote = Rswift.StringResource(key: "Feedback.Note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, zh-Hans
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Organization
      ///
      /// Locales: en, zh-Hans
      static let organization = Rswift.StringResource(key: "Organization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, zh-Hans
      static let personal = Rswift.StringResource(key: "Personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Personal Access Token
      ///
      /// Locales: en, zh-Hans
      static let loginPersonalToken = Rswift.StringResource(key: "Login.Personal.Token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Personal Access Token
      ///
      /// Locales: en, zh-Hans
      static let loginPlaceholderToken = Rswift.StringResource(key: "Login.Placeholder.Token", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static let errorNoneMessage = Rswift.StringResource(key: "Error.None.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static let errorNoneTitle = Rswift.StringResource(key: "Error.None.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please check your network link
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotConnectedMessage = Rswift.StringResource(key: "Error.Network.NotConnected.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy Statement: %@ will note collect any information from your GitHub account, please feel free to use it.
      ///
      /// Locales: en, zh-Hans
      static let loginPrivacy = Rswift.StringResource(key: "Login.Privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy Statement: TinyHub will not collect any information from your GitHub account. I don't even have a server. Please feel free to use it.
      ///
      /// Locales: en, zh-Hans
      static let loginPrivacyMessage = Rswift.StringResource(key: "Login.Privacy.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Prompt
      ///
      /// Locales: en, zh-Hans
      static let prompt = Rswift.StringResource(key: "Prompt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Public library + private library
      ///
      /// Locales: en, zh-Hans
      static let loginPrivilegeWithPrivate = Rswift.StringResource(key: "Login.Privilege.WithPrivate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Public only library
      ///
      /// Locales: en, zh-Hans
      static let loginPrivilegeOnlyPublic = Rswift.StringResource(key: "Login.Privilege.OnlyPublic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pull Request
      ///
      /// Locales: en, zh-Hans
      static let eventPull = Rswift.StringResource(key: "Event.Pull", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pull Requests
      ///
      /// Locales: en, zh-Hans
      static let pulls = Rswift.StringResource(key: "Pulls", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Push Event
      ///
      /// Locales: en, zh-Hans
      static let eventPush = Rswift.StringResource(key: "Event.Push", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: QQ Group
      ///
      /// Locales: en, zh-Hans
      static let qqGroup = Rswift.StringResource(key: "QQGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Repositories
      ///
      /// Locales: en, zh-Hans
      static let repositories = Rswift.StringResource(key: "Repositories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Repository
      ///
      /// Locales: en, zh-Hans
      static let repository = Rswift.StringResource(key: "Repository", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Repository access permission options
      ///
      /// Locales: en, zh-Hans
      static let loginPrivacyTitle = Rswift.StringResource(key: "Login.Privacy.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scoring encouragement
      ///
      /// Locales: en, zh-Hans
      static let score = Rswift.StringResource(key: "Score", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search for the content you want
      ///
      /// Locales: en, zh-Hans
      static let searchHintText = Rswift.StringResource(key: "Search.Hint.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search history
      ///
      /// Locales: en, zh-Hans
      static let searchHistory = Rswift.StringResource(key: "Search History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search item
      ///
      /// Locales: en, zh-Hans
      static let searchHintItem = Rswift.StringResource(key: "Search.Hint.Item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search options
      ///
      /// Locales: en, zh-Hans
      static let searchOptions = Rswift.StringResource(key: "Search Options", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share with friends
      ///
      /// Locales: en, zh-Hans
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Since
      ///
      /// Locales: en, zh-Hans
      static let since = Rswift.StringResource(key: "Since", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Star
      ///
      /// Locales: en, zh-Hans
      static let star = Rswift.StringResource(key: "Star", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Star Repository
      ///
      /// Locales: en, zh-Hans
      static let eventStar = Rswift.StringResource(key: "Event.Star", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Stargazers
      ///
      /// Locales: en, zh-Hans
      static let stargazers = Rswift.StringResource(key: "Stargazers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Stars
      ///
      /// Locales: en, zh-Hans
      static let stars = Rswift.StringResource(key: "Stars", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sure
      ///
      /// Locales: en, zh-Hans
      static let sure = Rswift.StringResource(key: "Sure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Switch language successfully
      ///
      /// Locales: en, zh-Hans
      static let toastLocalizationMessage = Rswift.StringResource(key: "Toast.Localization.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Switch theme successfully
      ///
      /// Locales: en, zh-Hans
      static let toastThemeMessage = Rswift.StringResource(key: "Toast.Theme.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Test
      ///
      /// Locales: en, zh-Hans
      static let test = Rswift.StringResource(key: "Test", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The current list doesn't have any data yet
      ///
      /// Locales: en, zh-Hans
      static let errorListIsEmptyMessage = Rswift.StringResource(key: "Error.ListIsEmpty.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The current network access is inaccessible
      ///
      /// Locales: en, zh-Hans
      static let errorNetworkNotReachableMessage = Rswift.StringResource(key: "Error.Network.NotReachable.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The search record is empty
      ///
      /// Locales: en, zh-Hans
      static let searchHistoryEmpty = Rswift.StringResource(key: "Search.History.Empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Theme
      ///
      /// Locales: en, zh-Hans
      static let theme = Rswift.StringResource(key: "Theme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static let errorTimeoutMessage = Rswift.StringResource(key: "Error.Timeout.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static let errorTimeoutTitle = Rswift.StringResource(key: "Error.Timeout.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, zh-Hans
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, zh-Hans
      static let to = Rswift.StringResource(key: "To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Trending
      ///
      /// Locales: en, zh-Hans
      static let trending = Rswift.StringResource(key: "Trending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: URL Schemes
      ///
      /// Locales: en, zh-Hans
      static let urlSchemes = Rswift.StringResource(key: "URL Schemes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unfollow
      ///
      /// Locales: en, zh-Hans
      static let unfollow = Rswift.StringResource(key: "Unfollow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, zh-Hans
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static let errorUnknownMessage = Rswift.StringResource(key: "Error.Unknown.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static let errorUnknownTitle = Rswift.StringResource(key: "Error.Unknown.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unstar
      ///
      /// Locales: en, zh-Hans
      static let unstar = Rswift.StringResource(key: "Unstar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, zh-Hans
      static let update = Rswift.StringResource(key: "Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Update %@
      ///
      /// Locales: en, zh-Hans
      static let latestUpdate = Rswift.StringResource(key: "Latest Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Updated
      ///
      /// Locales: en, zh-Hans
      static let updated = Rswift.StringResource(key: "Updated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use GitHub to login
      ///
      /// Locales: en, zh-Hans
      static let loginButtonTitle = Rswift.StringResource(key: "Login.Button.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: User
      ///
      /// Locales: en, zh-Hans
      static let user = Rswift.StringResource(key: "User", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: User not logged in
      ///
      /// Locales: en, zh-Hans
      static let errorUserNotLoginedInTitle = Rswift.StringResource(key: "Error.User.NotLoginedIn.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Users
      ///
      /// Locales: en, zh-Hans
      static let users = Rswift.StringResource(key: "Users", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watchers
      ///
      /// Locales: en, zh-Hans
      static let watchers = Rswift.StringResource(key: "Watchers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watchs
      ///
      /// Locales: en, zh-Hans
      static let watchs = Rswift.StringResource(key: "Watchs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Weekly
      ///
      /// Locales: en, zh-Hans
      static let weekly = Rswift.StringResource(key: "Weekly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: copy UUID Switch
      ///
      /// Locales: en, zh-Hans
      static let toastUUIDMessage = Rswift.StringResource(key: "Toast.UUID.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: copy successfully
      ///
      /// Locales: en, zh-Hans
      static let toastCopyMessage = Rswift.StringResource(key: "Toast.Copy.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: feedback content
      ///
      /// Locales: en, zh-Hans
      static let feedbackPlaceholder = Rswift.StringResource(key: "Feedback.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: readme
      ///
      /// Locales: en, zh-Hans
      static let readme = Rswift.StringResource(key: "readme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: submit successfully
      ///
      /// Locales: en, zh-Hans
      static let toastSubmitMessage = Rswift.StringResource(key: "Toast.Submit.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: update successfully
      ///
      /// Locales: en, zh-Hans
      static let toastUpdateMessage = Rswift.StringResource(key: "Toast.Update.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: user has canceled the authorization
      ///
      /// Locales: en, zh-Hans
      static let userCancelAuthorization = Rswift.StringResource(key: "User Cancel Authorization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 中文
      ///
      /// Locales: en, zh-Hans
      static let chinese = Rswift.StringResource(key: "Chinese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)

      /// en translation: -----Sign in with GitHub-----
      ///
      /// Locales: en, zh-Hans
      static func loginAuth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Auth"
        }

        return NSLocalizedString("Login.Auth", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, zh-Hans
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: Access Token
      ///
      /// Locales: en, zh-Hans
      static func accessToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Access Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Access Token"
        }

        return NSLocalizedString("Access Token", bundle: bundle, comment: "")
      }

      /// en translation: Any language
      ///
      /// Locales: en, zh-Hans
      static func anyLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Any Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Any Language"
        }

        return NSLocalizedString("Any Language", bundle: bundle, comment: "")
      }

      /// en translation: Author
      ///
      /// Locales: en, zh-Hans
      static func author(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Author", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Author"
        }

        return NSLocalizedString("Author", bundle: bundle, comment: "")
      }

      /// en translation: Authorization failed
      ///
      /// Locales: en, zh-Hans
      static func errorAppMessage1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Message1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Message1"
        }

        return NSLocalizedString("Error.App.Message1", bundle: bundle, comment: "")
      }

      /// en translation: Based on Reactive framework
      ///
      /// Locales: en, zh-Hans
      static func loginSlogan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Slogan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Slogan"
        }

        return NSLocalizedString("Login.Slogan", bundle: bundle, comment: "")
      }

      /// en translation: Bio
      ///
      /// Locales: en, zh-Hans
      static func bio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bio", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Bio"
        }

        return NSLocalizedString("Bio", bundle: bundle, comment: "")
      }

      /// en translation: Blog
      ///
      /// Locales: en, zh-Hans
      static func blog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blog"
        }

        return NSLocalizedString("Blog", bundle: bundle, comment: "")
      }

      /// en translation: Branches
      ///
      /// Locales: en, zh-Hans
      static func branches(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Branches", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Branches"
        }

        return NSLocalizedString("Branches", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Clear cache
      ///
      /// Locales: en, zh-Hans
      static func clearCache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear Cache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear Cache"
        }

        return NSLocalizedString("Clear Cache", bundle: bundle, comment: "")
      }

      /// en translation: Clear cache successfully
      ///
      /// Locales: en, zh-Hans
      static func toastCacheMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Cache.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Cache.Message"
        }

        return NSLocalizedString("Toast.Cache.Message", bundle: bundle, comment: "")
      }

      /// en translation: Clear history
      ///
      /// Locales: en, zh-Hans
      static func clearHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Clear History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Clear History"
        }

        return NSLocalizedString("Clear History", bundle: bundle, comment: "")
      }

      /// en translation: Clear the search history?
      ///
      /// Locales: en, zh-Hans
      static func alertEraseMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Erase.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Erase.Message"
        }

        return NSLocalizedString("Alert.Erase.Message", bundle: bundle, comment: "")
      }

      /// en translation: Click To Login
      ///
      /// Locales: en, zh-Hans
      static func clickToLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Click To Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click To Login"
        }

        return NSLocalizedString("Click To Login", bundle: bundle, comment: "")
      }

      /// en translation: Closed
      ///
      /// Locales: en, zh-Hans
      static func closed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Closed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Closed"
        }

        return NSLocalizedString("Closed", bundle: bundle, comment: "")
      }

      /// en translation: Company
      ///
      /// Locales: en, zh-Hans
      static func company(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Company"
        }

        return NSLocalizedString("Company", bundle: bundle, comment: "")
      }

      /// en translation: Confirm logout?
      ///
      /// Locales: en, zh-Hans
      static func alertLogoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Alert.Logout.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Logout.Message"
        }

        return NSLocalizedString("Alert.Logout.Message", bundle: bundle, comment: "")
      }

      /// en translation: Confirm that the language is changed to %@？
      ///
      /// Locales: en, zh-Hans
      static func alertLocalizationMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Alert.Localization.Message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Localization.Message"
        }

        let format = NSLocalizedString("Alert.Localization.Message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Confirm that the theme is changed to%@？
      ///
      /// Locales: en, zh-Hans
      static func alertThemeMessage(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Alert.Theme.Message", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Alert.Theme.Message"
        }

        let format = NSLocalizedString("Alert.Theme.Message", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Contributors
      ///
      /// Locales: en, zh-Hans
      static func contributors(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contributors", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contributors"
        }

        return NSLocalizedString("Contributors", bundle: bundle, comment: "")
      }

      /// en translation: Create Event
      ///
      /// Locales: en, zh-Hans
      static func eventCreate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Create"
        }

        return NSLocalizedString("Event.Create", bundle: bundle, comment: "")
      }

      /// en translation: Create Fork
      ///
      /// Locales: en, zh-Hans
      static func eventFork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Fork", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Fork"
        }

        return NSLocalizedString("Event.Fork", bundle: bundle, comment: "")
      }

      /// en translation: Daily
      ///
      /// Locales: en, zh-Hans
      static func daily(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Daily", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Daily"
        }

        return NSLocalizedString("Daily", bundle: bundle, comment: "")
      }

      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static func errorDataInvalidMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.DataInvalid.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.DataInvalid.Message"
        }

        return NSLocalizedString("Error.DataInvalid.Message", bundle: bundle, comment: "")
      }

      /// en translation: Data exception
      ///
      /// Locales: en, zh-Hans
      static func errorDataInvalidTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.DataInvalid.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.DataInvalid.Title"
        }

        return NSLocalizedString("Error.DataInvalid.Title", bundle: bundle, comment: "")
      }

      /// en translation: Dear, the current login has expired
      ///
      /// Locales: en, zh-Hans
      static func errorUserLoginExpiredMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Message"
        }

        return NSLocalizedString("Error.User.LoginExpired.Message", bundle: bundle, comment: "")
      }

      /// en translation: Dear, you haven't logged in yet
      ///
      /// Locales: en, zh-Hans
      static func errorUserNotLoginedInMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoginedIn.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoginedIn.Message"
        }

        return NSLocalizedString("Error.User.NotLoginedIn.Message", bundle: bundle, comment: "")
      }

      /// en translation: Delete Event
      ///
      /// Locales: en, zh-Hans
      static func eventDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Delete"
        }

        return NSLocalizedString("Event.Delete", bundle: bundle, comment: "")
      }

      /// en translation: Deleted branch
      ///
      /// Locales: en, zh-Hans
      static func deletedBranch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Deleted Branch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Deleted Branch"
        }

        return NSLocalizedString("Deleted Branch", bundle: bundle, comment: "")
      }

      /// en translation: Developers
      ///
      /// Locales: en, zh-Hans
      static func developers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Developers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Developers"
        }

        return NSLocalizedString("Developers", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, zh-Hans
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Environment: %@ - iOS%@ - v%@(%@)
      ///
      /// Locales: en, zh-Hans
      static func feedbackEnvironment(_ value1: String, _ value2: String, _ value3: String, _ value4: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Feedback.Environment", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2, value3, value4)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback.Environment"
        }

        let format = NSLocalizedString("Feedback.Environment", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2, value3, value4)
      }

      /// en translation: Event
      ///
      /// Locales: en, zh-Hans
      static func event(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event"
        }

        return NSLocalizedString("Event", bundle: bundle, comment: "")
      }

      /// en translation: Exit
      ///
      /// Locales: en, zh-Hans
      static func exit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit"
        }

        return NSLocalizedString("Exit", bundle: bundle, comment: "")
      }

      /// en translation: Exit login
      ///
      /// Locales: en, zh-Hans
      static func exitLogin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Exit Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Exit Login"
        }

        return NSLocalizedString("Exit Login", bundle: bundle, comment: "")
      }

      /// en translation: Favorite
      ///
      /// Locales: en, zh-Hans
      static func favorite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favorite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Favorite"
        }

        return NSLocalizedString("Favorite", bundle: bundle, comment: "")
      }

      /// en translation: Feedback
      ///
      /// Locales: en, zh-Hans
      static func feedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback"
        }

        return NSLocalizedString("Feedback", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: en, zh-Hans
      static func finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Finish"
        }

        return NSLocalizedString("Finish", bundle: bundle, comment: "")
      }

      /// en translation: Follow
      ///
      /// Locales: en, zh-Hans
      static func follow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow"
        }

        return NSLocalizedString("Follow", bundle: bundle, comment: "")
      }

      /// en translation: Follow system
      ///
      /// Locales: en, zh-Hans
      static func followSystem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow System", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow System"
        }

        return NSLocalizedString("Follow System", bundle: bundle, comment: "")
      }

      /// en translation: Followers
      ///
      /// Locales: en, zh-Hans
      static func followers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Followers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Followers"
        }

        return NSLocalizedString("Followers", bundle: bundle, comment: "")
      }

      /// en translation: Following
      ///
      /// Locales: en, zh-Hans
      static func following(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Following", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Following"
        }

        return NSLocalizedString("Following", bundle: bundle, comment: "")
      }

      /// en translation: Forked
      ///
      /// Locales: en, zh-Hans
      static func forked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forked"
        }

        return NSLocalizedString("Forked", bundle: bundle, comment: "")
      }

      /// en translation: Forks
      ///
      /// Locales: en, zh-Hans
      static func forks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Forks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Forks"
        }

        return NSLocalizedString("Forks", bundle: bundle, comment: "")
      }

      /// en translation: Handle Issue
      ///
      /// Locales: en, zh-Hans
      static func eventIssueHandle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Issue.Handle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Issue.Handle"
        }

        return NSLocalizedString("Event.Issue.Handle", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, zh-Hans
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: Hot
      ///
      /// Locales: en, zh-Hans
      static func hot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hot"
        }

        return NSLocalizedString("Hot", bundle: bundle, comment: "")
      }

      /// en translation: Issue
      ///
      /// Locales: en, zh-Hans
      static func issue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issue"
        }

        return NSLocalizedString("Issue", bundle: bundle, comment: "")
      }

      /// en translation: Issues
      ///
      /// Locales: en, zh-Hans
      static func issues(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issues", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issues"
        }

        return NSLocalizedString("Issues", bundle: bundle, comment: "")
      }

      /// en translation: Joined on %@
      ///
      /// Locales: en, zh-Hans
      static func joinedOn(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Joined on", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Joined on"
        }

        let format = NSLocalizedString("Joined on", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Language
      ///
      /// Locales: en, zh-Hans
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Language environment
      ///
      /// Locales: en, zh-Hans
      static func languageEnvironment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language Environment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language Environment"
        }

        return NSLocalizedString("Language Environment", bundle: bundle, comment: "")
      }

      /// en translation: Let's build from here
      ///
      /// Locales: en, zh-Hans
      static func appSlogan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App Slogan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App Slogan"
        }

        return NSLocalizedString("App Slogan", bundle: bundle, comment: "")
      }

      /// en translation: List is empty
      ///
      /// Locales: en, zh-Hans
      static func errorListIsEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ListIsEmpty.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ListIsEmpty.Title"
        }

        return NSLocalizedString("Error.ListIsEmpty.Title", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, zh-Hans
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, zh-Hans
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Login expired
      ///
      /// Locales: en, zh-Hans
      static func errorUserLoginExpiredTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.LoginExpired.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.LoginExpired.Title"
        }

        return NSLocalizedString("Error.User.LoginExpired.Title", bundle: bundle, comment: "")
      }

      /// en translation: Login failed, please try again later
      ///
      /// Locales: en, zh-Hans
      static func errorAppMessage2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.App.Message2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.App.Message2"
        }

        return NSLocalizedString("Error.App.Message2", bundle: bundle, comment: "")
      }

      /// en translation: Modify userinfo
      ///
      /// Locales: en, zh-Hans
      static func modifyUserinfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Modify Userinfo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Modify Userinfo"
        }

        return NSLocalizedString("Modify Userinfo", bundle: bundle, comment: "")
      }

      /// en translation: Montly
      ///
      /// Locales: en, zh-Hans
      static func montly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Montly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Montly"
        }

        return NSLocalizedString("Montly", bundle: bundle, comment: "")
      }

      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static func errorNavigationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Navigation.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Navigation.Message"
        }

        return NSLocalizedString("Error.Navigation.Message", bundle: bundle, comment: "")
      }

      /// en translation: Navigation error
      ///
      /// Locales: en, zh-Hans
      static func errorNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Navigation.Title"
        }

        return NSLocalizedString("Error.Navigation.Title", bundle: bundle, comment: "")
      }

      /// en translation: Network anomaly
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotReachableTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotReachable.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotReachable.Title"
        }

        return NSLocalizedString("Error.Network.NotReachable.Title", bundle: bundle, comment: "")
      }

      /// en translation: Network is not connected
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotConnectedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotConnected.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotConnected.Title"
        }

        return NSLocalizedString("Error.Network.NotConnected.Title", bundle: bundle, comment: "")
      }

      /// en translation: New Comment
      ///
      /// Locales: en, zh-Hans
      static func eventIssueComment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Issue.Comment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Issue.Comment"
        }

        return NSLocalizedString("Event.Issue.Comment", bundle: bundle, comment: "")
      }

      /// en translation: Nickname
      ///
      /// Locales: en, zh-Hans
      static func nickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nickname"
        }

        return NSLocalizedString("Nickname", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, zh-Hans
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Description
      ///
      /// Locales: en, zh-Hans
      static func noDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Description"
        }

        return NSLocalizedString("No Description", bundle: bundle, comment: "")
      }

      /// en translation: No bio provided
      ///
      /// Locales: en, zh-Hans
      static func noneBio(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Bio", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Bio"
        }

        return NSLocalizedString("None.Bio", bundle: bundle, comment: "")
      }

      /// en translation: No blog provided
      ///
      /// Locales: en, zh-Hans
      static func noneBlog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Blog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Blog"
        }

        return NSLocalizedString("None.Blog", bundle: bundle, comment: "")
      }

      /// en translation: No company provided
      ///
      /// Locales: en, zh-Hans
      static func noneCompany(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Company", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Company"
        }

        return NSLocalizedString("None.Company", bundle: bundle, comment: "")
      }

      /// en translation: No description provided
      ///
      /// Locales: en, zh-Hans
      static func noneDesc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Desc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Desc"
        }

        return NSLocalizedString("None.Desc", bundle: bundle, comment: "")
      }

      /// en translation: No email provided
      ///
      /// Locales: en, zh-Hans
      static func noneEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Email"
        }

        return NSLocalizedString("None.Email", bundle: bundle, comment: "")
      }

      /// en translation: No hot repository
      ///
      /// Locales: en, zh-Hans
      static func noneRepo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Repo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Repo"
        }

        return NSLocalizedString("None.Repo", bundle: bundle, comment: "")
      }

      /// en translation: No license
      ///
      /// Locales: en, zh-Hans
      static func noneLicense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.License", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.License"
        }

        return NSLocalizedString("None.License", bundle: bundle, comment: "")
      }

      /// en translation: No location provided
      ///
      /// Locales: en, zh-Hans
      static func noneLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Location"
        }

        return NSLocalizedString("None.Location", bundle: bundle, comment: "")
      }

      /// en translation: No nickname
      ///
      /// Locales: en, zh-Hans
      static func noneNickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None.Nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None.Nickname"
        }

        return NSLocalizedString("None.Nickname", bundle: bundle, comment: "")
      }

      /// en translation: Note: Feedback will be submitted to the GitHub repository as an issue
      ///
      /// Locales: en, zh-Hans
      static func feedbackNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback.Note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback.Note"
        }

        return NSLocalizedString("Feedback.Note", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, zh-Hans
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, zh-Hans
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open"
        }

        return NSLocalizedString("Open", bundle: bundle, comment: "")
      }

      /// en translation: Organization
      ///
      /// Locales: en, zh-Hans
      static func organization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Organization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Organization"
        }

        return NSLocalizedString("Organization", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, zh-Hans
      static func personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Personal"
        }

        return NSLocalizedString("Personal", bundle: bundle, comment: "")
      }

      /// en translation: Personal Access Token
      ///
      /// Locales: en, zh-Hans
      static func loginPersonalToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Personal.Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Personal.Token"
        }

        return NSLocalizedString("Login.Personal.Token", bundle: bundle, comment: "")
      }

      /// en translation: Personal Access Token
      ///
      /// Locales: en, zh-Hans
      static func loginPlaceholderToken(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Placeholder.Token", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Placeholder.Token"
        }

        return NSLocalizedString("Login.Placeholder.Token", bundle: bundle, comment: "")
      }

      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static func errorNoneMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.None.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.None.Message"
        }

        return NSLocalizedString("Error.None.Message", bundle: bundle, comment: "")
      }

      /// en translation: Placeholder Error
      ///
      /// Locales: en, zh-Hans
      static func errorNoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.None.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.None.Title"
        }

        return NSLocalizedString("Error.None.Title", bundle: bundle, comment: "")
      }

      /// en translation: Please check your network link
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotConnectedMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotConnected.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotConnected.Message"
        }

        return NSLocalizedString("Error.Network.NotConnected.Message", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Statement: %@ will note collect any information from your GitHub account, please feel free to use it.
      ///
      /// Locales: en, zh-Hans
      static func loginPrivacy(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Login.Privacy", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privacy"
        }

        let format = NSLocalizedString("Login.Privacy", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Privacy Statement: TinyHub will not collect any information from your GitHub account. I don't even have a server. Please feel free to use it.
      ///
      /// Locales: en, zh-Hans
      static func loginPrivacyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privacy.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privacy.Message"
        }

        return NSLocalizedString("Login.Privacy.Message", bundle: bundle, comment: "")
      }

      /// en translation: Prompt
      ///
      /// Locales: en, zh-Hans
      static func prompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Prompt", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Prompt"
        }

        return NSLocalizedString("Prompt", bundle: bundle, comment: "")
      }

      /// en translation: Public library + private library
      ///
      /// Locales: en, zh-Hans
      static func loginPrivilegeWithPrivate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privilege.WithPrivate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privilege.WithPrivate"
        }

        return NSLocalizedString("Login.Privilege.WithPrivate", bundle: bundle, comment: "")
      }

      /// en translation: Public only library
      ///
      /// Locales: en, zh-Hans
      static func loginPrivilegeOnlyPublic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privilege.OnlyPublic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privilege.OnlyPublic"
        }

        return NSLocalizedString("Login.Privilege.OnlyPublic", bundle: bundle, comment: "")
      }

      /// en translation: Pull Request
      ///
      /// Locales: en, zh-Hans
      static func eventPull(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Pull", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Pull"
        }

        return NSLocalizedString("Event.Pull", bundle: bundle, comment: "")
      }

      /// en translation: Pull Requests
      ///
      /// Locales: en, zh-Hans
      static func pulls(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pulls", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pulls"
        }

        return NSLocalizedString("Pulls", bundle: bundle, comment: "")
      }

      /// en translation: Push Event
      ///
      /// Locales: en, zh-Hans
      static func eventPush(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Push", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Push"
        }

        return NSLocalizedString("Event.Push", bundle: bundle, comment: "")
      }

      /// en translation: QQ Group
      ///
      /// Locales: en, zh-Hans
      static func qqGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QQGroup", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "QQGroup"
        }

        return NSLocalizedString("QQGroup", bundle: bundle, comment: "")
      }

      /// en translation: Repositories
      ///
      /// Locales: en, zh-Hans
      static func repositories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositories"
        }

        return NSLocalizedString("Repositories", bundle: bundle, comment: "")
      }

      /// en translation: Repository
      ///
      /// Locales: en, zh-Hans
      static func repository(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository"
        }

        return NSLocalizedString("Repository", bundle: bundle, comment: "")
      }

      /// en translation: Repository access permission options
      ///
      /// Locales: en, zh-Hans
      static func loginPrivacyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Privacy.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Privacy.Title"
        }

        return NSLocalizedString("Login.Privacy.Title", bundle: bundle, comment: "")
      }

      /// en translation: Scoring encouragement
      ///
      /// Locales: en, zh-Hans
      static func score(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Score", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Score"
        }

        return NSLocalizedString("Score", bundle: bundle, comment: "")
      }

      /// en translation: Search for the content you want
      ///
      /// Locales: en, zh-Hans
      static func searchHintText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.Hint.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.Hint.Text"
        }

        return NSLocalizedString("Search.Hint.Text", bundle: bundle, comment: "")
      }

      /// en translation: Search history
      ///
      /// Locales: en, zh-Hans
      static func searchHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search History"
        }

        return NSLocalizedString("Search History", bundle: bundle, comment: "")
      }

      /// en translation: Search item
      ///
      /// Locales: en, zh-Hans
      static func searchHintItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.Hint.Item", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.Hint.Item"
        }

        return NSLocalizedString("Search.Hint.Item", bundle: bundle, comment: "")
      }

      /// en translation: Search options
      ///
      /// Locales: en, zh-Hans
      static func searchOptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Options", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Options"
        }

        return NSLocalizedString("Search Options", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share with friends
      ///
      /// Locales: en, zh-Hans
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Since
      ///
      /// Locales: en, zh-Hans
      static func since(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Since", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Since"
        }

        return NSLocalizedString("Since", bundle: bundle, comment: "")
      }

      /// en translation: Star
      ///
      /// Locales: en, zh-Hans
      static func star(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Star", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Star"
        }

        return NSLocalizedString("Star", bundle: bundle, comment: "")
      }

      /// en translation: Star Repository
      ///
      /// Locales: en, zh-Hans
      static func eventStar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event.Star", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event.Star"
        }

        return NSLocalizedString("Event.Star", bundle: bundle, comment: "")
      }

      /// en translation: Stargazers
      ///
      /// Locales: en, zh-Hans
      static func stargazers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stargazers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stargazers"
        }

        return NSLocalizedString("Stargazers", bundle: bundle, comment: "")
      }

      /// en translation: Stars
      ///
      /// Locales: en, zh-Hans
      static func stars(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Stars", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Stars"
        }

        return NSLocalizedString("Stars", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, zh-Hans
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: Sure
      ///
      /// Locales: en, zh-Hans
      static func sure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sure"
        }

        return NSLocalizedString("Sure", bundle: bundle, comment: "")
      }

      /// en translation: Switch language successfully
      ///
      /// Locales: en, zh-Hans
      static func toastLocalizationMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Localization.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Localization.Message"
        }

        return NSLocalizedString("Toast.Localization.Message", bundle: bundle, comment: "")
      }

      /// en translation: Switch theme successfully
      ///
      /// Locales: en, zh-Hans
      static func toastThemeMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Theme.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Theme.Message"
        }

        return NSLocalizedString("Toast.Theme.Message", bundle: bundle, comment: "")
      }

      /// en translation: Test
      ///
      /// Locales: en, zh-Hans
      static func test(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Test", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Test"
        }

        return NSLocalizedString("Test", bundle: bundle, comment: "")
      }

      /// en translation: The current list doesn't have any data yet
      ///
      /// Locales: en, zh-Hans
      static func errorListIsEmptyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.ListIsEmpty.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.ListIsEmpty.Message"
        }

        return NSLocalizedString("Error.ListIsEmpty.Message", bundle: bundle, comment: "")
      }

      /// en translation: The current network access is inaccessible
      ///
      /// Locales: en, zh-Hans
      static func errorNetworkNotReachableMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Network.NotReachable.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Network.NotReachable.Message"
        }

        return NSLocalizedString("Error.Network.NotReachable.Message", bundle: bundle, comment: "")
      }

      /// en translation: The search record is empty
      ///
      /// Locales: en, zh-Hans
      static func searchHistoryEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.History.Empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.History.Empty"
        }

        return NSLocalizedString("Search.History.Empty", bundle: bundle, comment: "")
      }

      /// en translation: Theme
      ///
      /// Locales: en, zh-Hans
      static func theme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Theme"
        }

        return NSLocalizedString("Theme", bundle: bundle, comment: "")
      }

      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static func errorTimeoutMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Timeout.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Timeout.Message"
        }

        return NSLocalizedString("Error.Timeout.Message", bundle: bundle, comment: "")
      }

      /// en translation: Timeout error
      ///
      /// Locales: en, zh-Hans
      static func errorTimeoutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Timeout.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Timeout.Title"
        }

        return NSLocalizedString("Error.Timeout.Title", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, zh-Hans
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, zh-Hans
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To"
        }

        return NSLocalizedString("To", bundle: bundle, comment: "")
      }

      /// en translation: Trending
      ///
      /// Locales: en, zh-Hans
      static func trending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Trending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Trending"
        }

        return NSLocalizedString("Trending", bundle: bundle, comment: "")
      }

      /// en translation: URL Schemes
      ///
      /// Locales: en, zh-Hans
      static func urlSchemes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("URL Schemes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "URL Schemes"
        }

        return NSLocalizedString("URL Schemes", bundle: bundle, comment: "")
      }

      /// en translation: Unfollow
      ///
      /// Locales: en, zh-Hans
      static func unfollow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unfollow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unfollow"
        }

        return NSLocalizedString("Unfollow", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, zh-Hans
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unknown"
        }

        return NSLocalizedString("Unknown", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static func errorUnknownMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Unknown.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Unknown.Message"
        }

        return NSLocalizedString("Error.Unknown.Message", bundle: bundle, comment: "")
      }

      /// en translation: Unknown error
      ///
      /// Locales: en, zh-Hans
      static func errorUnknownTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.Unknown.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.Unknown.Title"
        }

        return NSLocalizedString("Error.Unknown.Title", bundle: bundle, comment: "")
      }

      /// en translation: Unstar
      ///
      /// Locales: en, zh-Hans
      static func unstar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unstar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unstar"
        }

        return NSLocalizedString("Unstar", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, zh-Hans
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update"
        }

        return NSLocalizedString("Update", bundle: bundle, comment: "")
      }

      /// en translation: Update %@
      ///
      /// Locales: en, zh-Hans
      static func latestUpdate(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Latest Update", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Latest Update"
        }

        let format = NSLocalizedString("Latest Update", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Updated
      ///
      /// Locales: en, zh-Hans
      static func updated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Updated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Updated"
        }

        return NSLocalizedString("Updated", bundle: bundle, comment: "")
      }

      /// en translation: Use GitHub to login
      ///
      /// Locales: en, zh-Hans
      static func loginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.Button.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.Button.Title"
        }

        return NSLocalizedString("Login.Button.Title", bundle: bundle, comment: "")
      }

      /// en translation: User
      ///
      /// Locales: en, zh-Hans
      static func user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User"
        }

        return NSLocalizedString("User", bundle: bundle, comment: "")
      }

      /// en translation: User not logged in
      ///
      /// Locales: en, zh-Hans
      static func errorUserNotLoginedInTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error.User.NotLoginedIn.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error.User.NotLoginedIn.Title"
        }

        return NSLocalizedString("Error.User.NotLoginedIn.Title", bundle: bundle, comment: "")
      }

      /// en translation: Users
      ///
      /// Locales: en, zh-Hans
      static func users(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users"
        }

        return NSLocalizedString("Users", bundle: bundle, comment: "")
      }

      /// en translation: Watchers
      ///
      /// Locales: en, zh-Hans
      static func watchers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watchers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watchers"
        }

        return NSLocalizedString("Watchers", bundle: bundle, comment: "")
      }

      /// en translation: Watchs
      ///
      /// Locales: en, zh-Hans
      static func watchs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Watchs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Watchs"
        }

        return NSLocalizedString("Watchs", bundle: bundle, comment: "")
      }

      /// en translation: Weekly
      ///
      /// Locales: en, zh-Hans
      static func weekly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly"
        }

        return NSLocalizedString("Weekly", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, zh-Hans
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: copy UUID Switch
      ///
      /// Locales: en, zh-Hans
      static func toastUUIDMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.UUID.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.UUID.Message"
        }

        return NSLocalizedString("Toast.UUID.Message", bundle: bundle, comment: "")
      }

      /// en translation: copy successfully
      ///
      /// Locales: en, zh-Hans
      static func toastCopyMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Copy.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Copy.Message"
        }

        return NSLocalizedString("Toast.Copy.Message", bundle: bundle, comment: "")
      }

      /// en translation: feedback content
      ///
      /// Locales: en, zh-Hans
      static func feedbackPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback.Placeholder"
        }

        return NSLocalizedString("Feedback.Placeholder", bundle: bundle, comment: "")
      }

      /// en translation: readme
      ///
      /// Locales: en, zh-Hans
      static func readme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("readme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "readme"
        }

        return NSLocalizedString("readme", bundle: bundle, comment: "")
      }

      /// en translation: submit successfully
      ///
      /// Locales: en, zh-Hans
      static func toastSubmitMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Submit.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Submit.Message"
        }

        return NSLocalizedString("Toast.Submit.Message", bundle: bundle, comment: "")
      }

      /// en translation: update successfully
      ///
      /// Locales: en, zh-Hans
      static func toastUpdateMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.Update.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.Update.Message"
        }

        return NSLocalizedString("Toast.Update.Message", bundle: bundle, comment: "")
      }

      /// en translation: user has canceled the authorization
      ///
      /// Locales: en, zh-Hans
      static func userCancelAuthorization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User Cancel Authorization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User Cancel Authorization"
        }

        return NSLocalizedString("User Cancel Authorization", bundle: bundle, comment: "")
      }

      /// en translation: 中文
      ///
      /// Locales: en, zh-Hans
      static func chinese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chinese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chinese"
        }

        return NSLocalizedString("Chinese", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "AppLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'AppLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
